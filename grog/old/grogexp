#!/bin/ksh
#
# grogexp: Shell script to generate C class structures, function definitions, 
#   and CPP macro definitions from RDBMS data dictionary + ancillary tables
#
# Input: 
#   $1 = [-nms]
#   Where nms=Do not generate method stubs
#
# Output: "classname".(extention)   source file - class definitions and stubs
#         "classname".(extention)   header file - class declarations and macros
#
# Copyright 1993 by Mitch C. Amiano
# All Rights Reserved
#
# Notes:
#   This package impliments the GROG (Generalized Relational Object Generator)
#      application protocol for a class of languages commonly known as 
#      embedded SQL precompilers (E/SQL).  Specifically, the GROG/SQL-C package
#      generates code suitable to compile with many E/SQL-in-C precompilers.
#
#   As of 8/3/93, GROG/SQL-C requires a number of UNIX tools, including
#      'sed', 'awk', and 'ksh'.  This and other implimentations of GROG
#      (should they be written) may or may not continue to make use of these
#      or similar tools.
#
#  As of 8/3/93, GROG/SQL-C contains interleaved and hardcoded templates of 
#     E/SQL-C code and comments throughout the implimentation, which is to
#     say that it is a hack.  Time did not permit otherwise, but a rewrite
#     should address this weakness (and the resultant maintenance anomalies)
#     as a first priority.  A preferrable method would be to use a 
#     code-factoring language, such as NOpGen, to reduce the generator
#     to a series of code-terms, repository interrogation programs,
#     and instantiation parameter lists.
#     (NOpGen is Copyright 1993 by Mitch C. Amiano)
#
#  GROG/SQL-C has a problem it shares with many code-generators - lack of
#    support for user-defined code-fragments.  This leads to extra (excessive)
#    maintenance of the differences between files-as-generated and
#    files-as-customized-by-developer.  The obvious remedy is to allow 
#    the developer to define the custom code-fragments up-front in the
#    configuration database.   The downside to this approach is that 
#    it requires a significant investment in developer-oriented database
#    update tools, as well as tools to make up for the visibility
#    and comprehensive views of the source-configurations lost when moving
#    from their traditional hierarchy to a more-or-less invisible table.

PROGNAME=$0
TODAY=`date +%D`
GROG_RET_TYPE="int"
GROG_SUCCESS="GROG_SUCCESS"
GROG_FAILURE="GROG_FAILURE"
HEADER_PATH="./include"
HEADER_SUFFIX=".h"
SOURCE_PATH="./src"
SOURCE_SUFFIX=".pc"
TMP_DIR="./tmp"
METHODS_TMP_FILE="$TMP_DIR/methods"
MetaObjectInit=""
META_INIT_FILE="$TMP_DIR/meta"
NO_METHOD_STUBS=0
SourceTmpFile="$TMP_DIR/source_tmp"
HeaderTmpFile="$TMP_DIR/header_tmp"
HOST_DECLARE_FILE="$TMP_DIR/declare"
HOST_COPY_FILE="$TMP_DIR/copy"
HOST_REFERENCE_FILE="$TMP_DIR/reference"
HOST_NAME_FILE="$TMP_DIR/name"
VDEFS_FILE="$TMP_DIR/vdefs"
VMEMBERS_FILE="$TMP_DIR/vmembers"
VALIDATE_FILE="$TMP_DIR/valdatecalls"
DELETE_FILE="$TMP_DIR/del_file"
VCONSTRUCTS_FILE="$TMP_DIR/vconstructs"
META_VALIDATE_FILE="$TMP_DIR/metav"
PRINT_MEMBER_FILE="$TMP_DIR/print_members"

if [ ${1:-"null"} = "-nms" ]
then
	 NO_METHOD_STUBS=1
fi

fatalError() {
   echo "$PROGNAME: $*"
   exit -1
}

. dmpd.sh
. dmpm.sh
. dmpc.sh

grogdump() {

   if [ ! -d "$TMP_DIR" ]
   then 
      mkdir $TMP_DIR
   fi

   if [ ! -d "$SOURCE_PATH" ]
   then 
      mkdir $SOURCE_PATH
   fi

   if [ ! -d "$HEADER_PATH" ]
   then 
      mkdir $HEADER_PATH
   fi

   for i in 1
   do

      sqlplus -s $LOGNAME/$LOGNAME <<EOT
set heading off
set feedback off
set pagesize 0
set long 500
set SHOW OFF
set linesize 500
set MAXDATA 32760
set ARRAYSIZE 2
select distinct(Name)
from GrogClass
/
quit
EOT

   done | while read ClassName
      do
         echo "" > $META_INIT_FILE
         ClassName=`echo $ClassName`
         dumpclass ${ClassName}
      done
}

grogdump
